# Generated by Django 5.0.14 on 2025-09-06 11:54

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import reader.models
import reader.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Artist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="The artist's full name",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="The author's full name",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.CharField(
                        auto_created=True,
                        max_length=25,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the category. Must be unique and cannot be changed once set.",
                        max_length=25,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="A description for the category."),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name_plural": "Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Chapter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(help_text="Chapter title", max_length=250)),
                (
                    "number",
                    models.FloatField(
                        help_text="Chapter number (can be decimal for sub-chapters)",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        help_text="Upload a ZIP file containing chapter pages (max 500MB)",
                        null=True,
                        upload_to=reader.models.chapter_upload_path,
                        validators=[
                            reader.validators.validate_zip_file,
                            reader.validators.validate_file_size,
                        ],
                    ),
                ),
                (
                    "approval_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Review"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                        ],
                        default="pending",
                        help_text="Review status of the chapter",
                        max_length=10,
                    ),
                ),
                (
                    "rejection_reason",
                    models.TextField(
                        blank=True, help_text="Reason for rejection (if applicable)"
                    ),
                ),
                ("approved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "is_final",
                    models.BooleanField(
                        default=False,
                        help_text="Is this the final chapter of the series?",
                    ),
                ),
                (
                    "published_at",
                    models.DateTimeField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        help_text="Publication date (can be scheduled for future)",
                    ),
                ),
                ("views", models.PositiveIntegerField(default=0, editable=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who approved this chapter",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_chapters",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who uploaded this chapter",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploaded_chapters",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": [
                    "series",
                    models.OrderBy(models.F("volume__number"), nulls_last=True),
                    "number",
                ],
                "get_latest_by": ["published_at", "updated_at"],
            },
        ),
        migrations.CreateModel(
            name="Page",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "number",
                    models.PositiveIntegerField(
                        help_text="Page number within the chapter",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        help_text="The page image file", max_length=255, upload_to=""
                    ),
                ),
                ("width", models.PositiveIntegerField(editable=False)),
                ("height", models.PositiveIntegerField(editable=False)),
                ("mime_type", models.CharField(editable=False, max_length=50)),
                (
                    "position",
                    models.CharField(
                        choices=[("l", "Left"), ("r", "Right"), ("c", "Center")],
                        default="c",
                        help_text="Page position for reading layout",
                        max_length=1,
                    ),
                ),
                (
                    "is_spread",
                    models.BooleanField(
                        default=False, help_text="Is this a double-page spread?"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "chapter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pages",
                        to="reader.chapter",
                    ),
                ),
            ],
            options={
                "ordering": ["chapter", "number"],
            },
        ),
        migrations.CreateModel(
            name="Series",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True,
                        help_text="The title of the series",
                        max_length=250,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="The unique slug used in URLs. Will be auto-generated if left blank.",
                        unique=True,
                        verbose_name="URL Slug",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description or synopsis of the series"
                    ),
                ),
                (
                    "cover",
                    models.ImageField(
                        blank=True,
                        help_text="Cover image for the series. Maximum size: 2MB",
                        null=True,
                        upload_to=reader.models.series_cover_upload_path,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ongoing", "Ongoing"),
                            ("completed", "Completed"),
                            ("hiatus", "On Hiatus"),
                            ("canceled", "Canceled"),
                        ],
                        default="ongoing",
                        help_text="Publication status of the series",
                        max_length=10,
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("manga", "Manga"),
                            ("comic", "Comic"),
                            ("webtoon", "Webtoon"),
                        ],
                        default="manga",
                        help_text="Type of content (determines page layout)",
                        max_length=8,
                    ),
                ),
                (
                    "rating",
                    models.CharField(
                        choices=[
                            ("safe", "Safe"),
                            ("suggestive", "Suggestive"),
                            ("explicit", "Explicit"),
                        ],
                        default="safe",
                        help_text="Content rating for the series",
                        max_length=11,
                    ),
                ),
                (
                    "licensed",
                    models.BooleanField(
                        default=False, help_text="Is this series officially licensed?"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "artists",
                    models.ManyToManyField(
                        blank=True, related_name="series", to="reader.artist"
                    ),
                ),
                (
                    "authors",
                    models.ManyToManyField(
                        blank=True, related_name="series", to="reader.author"
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True, related_name="series", to="reader.category"
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who manages this series",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Series",
                "ordering": ["title"],
                "get_latest_by": "updated_at",
            },
        ),
        migrations.AddField(
            model_name="chapter",
            name="series",
            field=models.ForeignKey(
                help_text="The series this chapter belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="chapters",
                to="reader.series",
            ),
        ),
        migrations.CreateModel(
            name="Volume",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "number",
                    models.PositiveIntegerField(
                        help_text="Volume number",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True, help_text="Optional volume title", max_length=250
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Optional volume description"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "series",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="volumes",
                        to="reader.series",
                    ),
                ),
            ],
            options={
                "ordering": ["series", "number"],
            },
        ),
        migrations.AddField(
            model_name="chapter",
            name="volume",
            field=models.ForeignKey(
                blank=True,
                help_text="The volume this chapter belongs to (optional)",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="chapters",
                to="reader.volume",
            ),
        ),
        migrations.CreateModel(
            name="Alias",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Alternative name or alias",
                        max_length=255,
                        verbose_name="Alias Name",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Aliases",
                "indexes": [
                    models.Index(
                        fields=["content_type", "object_id"],
                        name="reader_alia_content_685e37_idx",
                    ),
                    models.Index(fields=["name"], name="reader_alia_name_ac1ccc_idx"),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="alias",
            constraint=models.UniqueConstraint(
                fields=("name", "content_type", "object_id"),
                name="unique_alias_content_object",
            ),
        ),
        migrations.AddConstraint(
            model_name="page",
            constraint=models.CheckConstraint(
                check=models.Q(("number__gte", 1)), name="page_number_positive"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="page",
            unique_together={("chapter", "number")},
        ),
        migrations.AddIndex(
            model_name="series",
            index=models.Index(
                fields=["status", "updated_at"], name="reader_seri_status_51389d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="series",
            index=models.Index(
                fields=["kind", "rating"], name="reader_seri_kind_ee8de7_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="volume",
            constraint=models.CheckConstraint(
                check=models.Q(("number__gte", 1)), name="volume_number_positive"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="volume",
            unique_together={("series", "number")},
        ),
        migrations.AddIndex(
            model_name="chapter",
            index=models.Index(
                fields=["series", "approval_status"],
                name="reader_chap_series__cbf6c8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="chapter",
            index=models.Index(
                fields=["published_at", "approval_status"],
                name="reader_chap_publish_7b558f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="chapter",
            index=models.Index(
                fields=["uploaded_by", "approval_status"],
                name="reader_chap_uploade_9da655_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="chapter",
            constraint=models.CheckConstraint(
                check=models.Q(("number__gte", 0)), name="chapter_number_nonnegative"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="chapter",
            unique_together={("series", "volume", "number")},
        ),
    ]
